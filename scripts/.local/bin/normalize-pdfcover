#!/bin/bash

# Parse command-line options using getopt (`a:` means that the option `a` has an argument)
ARGS=$(getopt -o ho:n:c: --long help,output:,page-number:,cover: -- "$@")
eval set -- "$ARGS"

help="An Unix shell script to normalize the cover of a .pdf file.

USAGE:
  $(basename "$0") [OPTIONS] [--] FILE

ARGS:
  FILE
    A pdf file

OPTIONS:
  -n, --page-number=NUM
    Page reference in FILE in which the cover is normalized to. The default value is 2.
  -o, --output=OUT
    Output filename. The default value is out.pdf.
  -c COVER_FILE, --cover=COVER_FILE
    If FILE does not contain the cover, you can pass a different path to the cover with this option. If it is a .pdf file, the cover is assumed to be the first page. If it is a image (e.g., a .png file), it is first converted to .pdf. In both cases, a merge is performed between COVER_FILE and FILE, and COVER_FILE is normalized with respect to the first page of FILE (pass the -n option to change the page number).
  -h, --help
    Print this help.
"

# default values
output_file='out.pdf'
page_number=2
# Process the options and arguments
while true; do
  case "$1" in
    -h | --help)
      echo "$help"
      exit 0  # Exit after displaying help
      ;;
    -o | --output)
      output_file="$2"
      shift 2
      ;;
    -n | --page-number)
      page_number="$2"
      shift 2
      ;;
    -c | --cover)
      cover_path="${2/#\~/$HOME}"
      [[ ! -f "$cover_path" ]] && echo "Error, $cover_path is not a file" && exit 1
      shift 2
      ;;
    --)
      shift
      break
      ;;
  esac
done

file="${1/#\~/$HOME}"
if [[ -v cover_path ]]; then
  page_number=$((page_number + 1))
  if [[ ! "$(file $cover_path)" =~ "PDF" ]]; then
    convert "$cover_path" /tmp/cover.pdf
    cover_path='/tmp/cover.pdf'
  fi
  cpdf -merge "$cover_path" "$file" -o /tmp/merged.pdf
  file='/tmp/merged.pdf'
fi

# get te cover
read -a cover_size <<< "$(pdfinfo -f 1 -l 1 "$file" | grep -a 'Page.*size:')"
# get rest
read -a rest_size <<< "$(pdfinfo -f $page_number -l $page_number "$file" | grep -a 'Page.*size:')"

# normize cover
x_ratio=$(bc <<< "scale=6; ${rest_size[3]} / ${cover_size[3]}")
y_ratio=$(bc <<< "scale=6; ${rest_size[5]} / ${cover_size[5]}")
cpdf -scale-page "$x_ratio $y_ratio" "$file" 1 -o $output_file