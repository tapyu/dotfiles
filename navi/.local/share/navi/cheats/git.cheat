% git

# cd to git root dir
cd "$(git rev-parse --show-toplevel)"

# create a brand-new/orphan branch (without files/commits)
git switch --orphan <new-branch>

# create a new branch
git switch --create <new-branch>

# rename branch
git branch -m <renamed-branch>

# delete remote repo
git push --delete <remote> <branch>

# set upstream locally
git branch --set-upstream-to=<remote>/<new-branch>

# set upstream remotelly (pushes it)
git push --set-upstream <remote> <new-branch>

# reset local branch commits
git reset --hard <remote_branch>

# print untracked files
git ls-files --others --exclude-standard

# local ignore
echo '<files>' >> $(git rev-parse --show-toplevel)/.git/info/exclude

# open gitignore
repo_root=$(git rev-parse --show-toplevel) && [[ -f "$repo_root/.gitignore" ]] && eval ${EDITOR:-vi} "$repo_root/.gitignore" || echo ".gitignore file not found or not in a git repository."

# forget previously tracked but now gitignored files
git rm -r --cached .
git add -A
git push <remote> <branch>

$ branch: git branch --remotes | awk -F/ '{ print $NF }' | sort | uniq
$ remote: echo "" --- --fzf-overrides --query="origin"
$ files: find . -maxdepth 1 -printf '%f\n'
$ remote_branch: git branch -r | grep -v 'HEAD' --- --header "discard all local commits and match the remote branch"
$ renamed-branch: echo "" --- --header "If the branch is in remote repo, you need: 1- `git push --delete URL oldname`, 2- `git push --set-upstream URL new_branch`"

% git, worktree

# create a linked worktree `brach` to the `path` 
git worktree add <prefix>/<path> <branch>

$ prefix: echo -e '`prefix` is the path containing all worktrees, i.e., the worktree root dir.\nThe default option is the parent dir of the current repository root dir.\n\nPS1: Linked worktree contrasts with the main worktree, which is initiated via `git clone` or `git init`.\nPS2: `git worktree` must be run inside a worktree, whether it is linked or main.'; { git rev-parse --show-toplevel | xargs dirname; } 2> /dev/null || pwd; echo '' --- --fzf-overrides '--header-lines=5 --height=100%'
$ branch: echo -e 'Which branch do you want to add as a linked worktree?'; git branch --remotes | awk -F/ '{ print $NF }' | sort | uniq --- --fzf-overrides '--header-lines=1 --height=100%'
$ path: echo -e 'It is reasonable that `path` is equal to the branch name.'; echo '<branch>'; echo '' --- --fzf-overrides '--header-lines=1 --height=100%'

# cd (chage directory) between worktrees

cd -g <worktree>

$ worktree: echo 'PS: It assumes that cdhist has been installed'; git worktree list | awk -F'[][]' '{ print $2 }' | grep -v $(git branch --show-current) --- --fzf-overrides '--header-lines=1 --height=100%'

% git, sparse

# sparsely clone
git-sparse-clone <repo_url> <branch> <local_path> <subdirectories_to_include>

$ branch: git ls-remote --refs <repo_url> | head -n 1 | awk '{ print $2 }' | cut -d/ -f3

% gh

# fork repo
gh repo fork <github_url>


% git submodule

# add submodule
git submodule add<prefix_branch><is_branch> <URL> <dir_prefix>/<dir_basename>

$ URL: echo 'NOTE: Make sure you are running `git submodule add` from the root directory of this git repository.' --- --fzf-overrides '--header-lines=1 --query="https://github.com/"'
$ is_branch: echo -e 'If you want to add the default repo branch, leave it empty. Otherwise, type the desired branch name.\n\n'; echo ''; git ls-remote --refs <URL> | \grep 'heads' | awk -F '/' '{print $NF}' --- --fzf-overrides '--header-lines=3 --height=100%'
$ prefix_branch: [[ -n $(echo <is_branch>) ]] && echo ' --branch=' || echo '' --- --fzf-overrides '--select-1'
$ dir_prefix: echo -e "Where is the path of the submodule you want to add? Enter the relative dir path with respect to it."; find "$(git rev-parse --show-toplevel)" -type d | sed "s|$(git rev-parse --show-toplevel)/\?||" | grep -v '^$' --- --fzf-overrides '--header-lines=2 --height=100%'
$ dir_basename: echo "What will the submodule be called in your repository?" --- --fzf-overrides '--header-lines=1 --query="TODO: try to get repo name here"'

% git annex

# init git annex
git annex init "<description>"

# init remote git annex
git annex initremote <git_annex_remote_name> type=external externaltype=rclone target=<rclone_target_name> prefix=git_annex/<google_drive_dir> chunk=50MiB encryption=shared mac=HMACSHA512 rclontarget_name=lower

# add file
git annex add <large_file>

$ large_file: echo -e 'At this point you are adding the git annexed files, which will be converted to symlinks to git.\nAfter running this command, you will see that `large_file` has been added to git, but it is only a symlink\nthat is being add and will be pushed to Github. This is a multi-selection prompt, press tab/shift-tab to select/unselect\nand enter to finish.'; find . -type f -size +50M ---  --multi --fzf-overrides '--header-lines=4 --no-select-1 --height=100%'
$ description: echo -e 'Git annex description. This description will appear when you run `git annex info`. E.g.,\n\n\ta1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6 -- Google Drive repository [here]\n\nWhere `a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6` is the UUID (Universally Unique Identifier) and serves as a\nunique identifier for that specific repository clone\nand `[here]` indicates that this entry corresponds to the repository at the current location.'; echo ''  ---  --fzf-overrides '--query="Google Drive repository" --header-lines=6 --height=100%'
$ google_drive_dir: echo -e '`prefix=` sets the dir path on Google Drive. Under the `git_annex` dir, it is reasonable to create\na dir for each repostitory that is using it. In this way, we can have the\nblob files separated for each repo. You should use the repo name.\nAfter running this command, you will see git_annex/google_drive_dir on Google Drive'; echo "$(basename $(git rev-parse --show-toplevel))" --- --fzf-overrides '--header-lines=4 --no-select-1 --height=100%'
$ rclone_target_name: rclone config show | \grep '\[.*\]' | tr -d '[]' --- --header "Cloud service label you gave in configuration step (it is the bracketed name output of the command `rclone config show`)" --fzf-overrides '--height=100%'
$ git_annex_remote_name: echo -e 'Give any label you want. It is equivalent to the git remote `origin` label, which is automatically set by git when you clone a repo.\nAfter running it, you can see `[annex-origin]` when running `git annex info`.' --- --fzf-overrides '--query=annex-origin --header-lines=2 --height=100%'

# Copy/transfer/push git annexed files to remote
git annex find | while IFS= read -r git_annexed_file; do
    while ! git annex copy "$git_annexed_file" --to=<git_annex_remote>; do
        :
    done
done

# Get/transfer/pull git annexed files to local repo
git annex find | while IFS= read -r git_annexed_file; do
    while ! git annex get "$git_annexed_file" --from=<git_annex_remote>; do
        :
    done
done

$ git_annex_remote: echo -e 'WARNING: Make sure you are selecting the annex remote label you gave\nin the `git annex initremote`\nThis command will effectively copy the files to Google Drive'; git annex info | \grep -P '.{8}-.{8}' | awk '{ print $NF }' | tr -d '[]' --- --fzf-overrides '--header-lines=3 --height=100%'

# print git annexed files
git annex find

