% git

# cd to git root dir
cd "$(git rev-parse --show-toplevel)"

# create an brand-new/orphan branch (without files)
git switch --orphan <new-branch>

# rename branch
git branch -m <renamed-branch>

# delete remote repo
git push --delete <URL> <branch>

# set upstream
git branch --set-upstream-to=<URL>/<new-branch>

# local ignore
echo '<files>' >> $(git rev-parse --show-toplevel)/.git/info/exclude

# open gitignore
repo_root=$(git rev-parse --show-toplevel) && [[ -f "$repo_root/.gitignore" ]] && eval ${EDITOR:-vi} "$repo_root/.gitignore" || echo ".gitignore file not found or not in a git repository."

$ branch: git branch --remotes | awk -F/ '{ print $NF }' | sort | uniq
$ URL: echo "" --- --fzf-overrides --query="origin"
$ files: find . -maxdepth 1 -printf '%f\n'
$ renamed-branch: echo "" --- --header "If the branch is in remote repo, you need: 1- `git push --delete URL oldname`, 2- `git push --set-upstream URL new_branch`"

% git, worktree

# create a linked worktree `brach` to the `path` (`path` must contains the worktree root dir). Linked worktree contrasts with the main worktree, which is initiated via `git clone` or `git init`. It must be run inside a worktree, whether it is linked or main. In order to make it organized, one must to place all worktrees within the same parent directory
git worktree add <prefix>/<path> <branch>

$ prefix: { git rev-parse --show-toplevel | xargs dirname; } 2> /dev/null || pwd
$ branch: git branch --remotes | awk -F/ '{ print $NF }' | sort | uniq | grep -v "$(git branch | awk '{ print $2 }')"
$ path: $branch

% git, sparse

# sparsely clone
git-sparse-clone <repo_url> <branch> <local_path> <subdirectories_to_include>

$ branch: git ls-remote --symref <repo_url> | head -n 1 | awk '{ print $2 }' | cut -d/ -f3

% gh

# fork repo
gh repo fork <github_url>
